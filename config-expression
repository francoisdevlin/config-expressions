#!/usr/bin/env ruby
require 'json'
require 'optparse'
require_relative 'matchers'
require_relative 'functions'

command = ARGV[0]

available_commands = ["lookup","explain"].sort
unless available_commands.include? command
	print "'#{command}' is not a valid command, it must be one of:\n"
	available_commands.each {|c| print "\t#{c}\n"}
	exit 1
end


args = ARGV.drop(1)

config_file_path="conf.jsonw"
$no_color = false
opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: config-expression #{command} [OPTIONS] PATH"

      opts.separator ""
      opts.separator "Specific options:"

      # Mandatory argument.
      opts.on("-f", "--file FILE",
              "Reads json config from file, defaults to #{config_file_path}") do |conf_file|
      	config_file_path = conf_file 
      end
      opts.on("--no-color", "Disables color in the output") {|v| $no_color=true}
end

class String
	def black;  $no_color ? self  : "\e[30m#{self}\e[0m" end
	def red; $no_color ? self : "\e[31m#{self}\e[0m" end
	def green;  $no_color ? self : "\e[32m#{self}\e[0m" end
	def yellow;  $no_color ? self : "\e[33m#{self}\e[0m" end
	def blue;  $no_color ? self : "\e[34m#{self}\e[0m" end
	def magenta;  $no_color ? self : "\e[35m#{self}\e[0m" end
	def cyan;  $no_color ? self : "\e[36m#{self}\e[0m" end
	def gray;  $no_color ? self : "\e[37m#{self}\e[0m" end
end

opt_parser.parse!(args)
conf_path = args[0];

path = conf_path.split('.')
config_file = File.read(config_file_path)
config = JSON.parse(config_file)

start_state = PatternState.new
start_state.path = path

result = recursion_2(start_state,config)


def explain(pattern, state, conf)
	if state.state == :complete
		return "HIT    ".green + ": #{pattern} VALUE: '#{state.value}'"
	elsif state.state == :collision
		return "COLLIDE".red + ": #{pattern} VALUE: '#{state.value}'"
	else
		value = conf
		state.evaluated_path.each {|p| value = value[p] unless value.nil?}
		has_children = value.instance_of? Hash
		message =  ": #{pattern}"
		message += ", ignoring children" if has_children
		return "MISS   ".yellow + message.gray
	end
end

if command == "lookup" 
	result = result.reject{|a,b| b.state == :missing }
	if result.nil? or result.size == 0
		puts "Could not find #{conf_path}"
		exit 1
	end
	highest_expression = result[0][0]
	highest_result = result[0][1]

	if highest_result.state == :complete
		puts highest_result.value
		exit 0
	end

	if highest_result.state == :collision
		repeats = result.select{|a,b| b.state == :collision}
		print "Ambiguous match for '#{conf_path}', the following expressions have the same priority:\n"
		repeats.each {|a,b| print "'#{a}'\n"}
		exit 1
	end
	puts "Could not find #{conf_path}"
	exit 1
elsif command == "explain"
	i = 0
	print "The following rules were evaluated in this order, the first hit is returned\n"
	final_result = nil
	locality = nil;
	result.each do |pattern,state|
		i+= 1
		if (state.locality != locality)
			print "Entering locality '#{state.locality.join(".")}'\n"
		end
		locality = state.locality
		print "Rule %5d: #{explain pattern, state, config}\n" %[i]
		final_result = state.value if state.state == :complete and final_result.nil?
	end
	if final_result.nil?
		print "Could not find #{conf_path}"
	else
		puts final_result
	end
	exit 0
end
